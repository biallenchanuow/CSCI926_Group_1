from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from src.testproject.classes import DriverStepSettings, StepSettings
from src.testproject.decorator import report_assertion_errors
from src.testproject.enums import SleepTimingType
from src.testproject.sdk.drivers import webdriver
import pytest


"""
This pytest test was automatically generated by TestProject
    Project: Jupyter Notebook Functional Test
    Package: TestProject.Generated.Tests.JupyterNotebookFunctionalTest
    Test: Terminal - Code Editing
    Generated by: Jianpeng Chen (jc107@uowmail.edu.au)
    Generated on 05/24/2021, 04:17:38
"""


@pytest.fixture()
def driver():
    driver = webdriver.Chrome(token="fk3yOvlRsLLpCaaggFfMO8vEplPSx8qsdrnNiqcDOgM",
                              project_name="Jupyter Notebook Functional Test",
                              job_name="Terminal - Code Editing")
    step_settings = StepSettings(timeout=15000,
                                 sleep_time=500,
                                 sleep_timing_type=SleepTimingType.Before)
    with DriverStepSettings(driver, step_settings):
        yield driver
    driver.quit()


@report_assertion_errors
def test_main(driver):
    # Test Parameters
    # Auto generated application URL parameter
    ApplicationURL = "http://localhost:8888/tree"

    # 1. Navigate to '{ApplicationURL}'
    # Navigates the specified URL (Auto-generated)
    driver.get(f'{ApplicationURL}')

    # 2. Click 'functional test folder'
    functional_test_folder = driver.find_element(By.XPATH,
                                                 "//span[. = 'functional test folder']")
    functional_test_folder.click()

    # 3. Click 'New
    #
    #               ...'
    new_ = driver.find_element(By.CSS_SELECTOR,
                               "#new-dropdown-button")
    new_.click()

    # 4. Click 'Terminal1'
    terminal1 = driver.find_element(By.XPATH,
                                    "//a[. = 'Terminal']")
    terminal1.click()

    # 5. Switch to window '1'
    driver.switch_to.window(driver.window_handles[1])

    # 6. Click 'CANVAS'
    canvas = driver.find_element(By.XPATH,
                                 "//canvas[4]")
    canvas.click()

    # 7. Send 'ENTER' key(s)
    ActionChains(driver).send_keys(Keys.ENTER).perform()

    # 8. Send 'ENTER' key(s)
    ActionChains(driver).send_keys(Keys.ENTER).perform()

    # 9. Type ')' in 'TEXTAREA24'
    textarea24 = driver.find_element(By.XPATH,
                                     "//textarea")
    textarea24.send_keys(")")

    # 10. Click 'CANVAS'
    canvas = driver.find_element(By.XPATH,
                                 "//canvas[4]")
    canvas.click()

    # 11. Click 'CANVAS'
    canvas = driver.find_element(By.XPATH,
                                 "//canvas[4]")
    canvas.click()

    # 12. Click 'CANVAS'
    canvas = driver.find_element(By.XPATH,
                                 "//canvas[4]")
    canvas.click()

    # 13. Send 'ENTER' key(s)
    ActionChains(driver).send_keys(Keys.ENTER).perform()

    # 14. Type 'for i in range(10):
    #     if i % 2 == 0:
    #         print(i)' in 'TEXTAREA24'
    textarea24 = driver.find_element(By.XPATH,
                                     "//textarea")
    textarea24.send_keys(
        "for i in range(10):\n    if i % 2 == 0:\n        print(i)")

    # 15. Click 'CANVAS'
    canvas = driver.find_element(By.XPATH,
                                 "//canvas[4]")
    canvas.click()

    # 16. Click 'CANVAS'
    canvas = driver.find_element(By.XPATH,
                                 "//canvas[4]")
    canvas.click()

    # 17. Send 'ENTER' key(s)
    ActionChains(driver).send_keys(Keys.ENTER).perform()

    # 18. Type 'class TestTerminal:
    #     def show_message(self):
    #         message = "Testing terminal"
    #         return message
    #
    #     def io_test(self):
    #         sentence = input("Enter a sentence: ")
    #         reply = "You have entered the following sentence: " + sentence
    #         return reply
    #
    #
    # test = TestTerminal()
    # print(test.show_message())
    # print(test.io_test())' in 'TEXTAREA24'
    textarea24 = driver.find_element(By.XPATH,
                                     "//textarea")
    textarea24.send_keys("class TestTerminal:\n    def show_message(self):\n        message = \"Testing terminal\"\n        return message\n\n    def io_test(self):\n        sentence = input(\"Enter a sentence: \")\n        reply = \"You have entered the following sentence: \" + sentence\n        return reply\n\n\ntest = TestTerminal()\nprint(test.show_message())\nprint(test.io_test())")
